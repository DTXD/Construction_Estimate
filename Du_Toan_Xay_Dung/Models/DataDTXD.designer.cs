#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Du_Toan_Xay_Dung.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Construction_Estimating")]
	public partial class DataDTXDDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertArea(Area instance);
    partial void UpdateArea(Area instance);
    partial void DeleteArea(Area instance);
    partial void InsertUserWork(UserWork instance);
    partial void UpdateUserWork(UserWork instance);
    partial void DeleteUserWork(UserWork instance);
    partial void InsertBuilding(Building instance);
    partial void UpdateBuilding(Building instance);
    partial void DeleteBuilding(Building instance);
    partial void InsertBuildingItem(BuildingItem instance);
    partial void UpdateBuildingItem(BuildingItem instance);
    partial void DeleteBuildingItem(BuildingItem instance);
    partial void InsertImages_Url(Images_Url instance);
    partial void UpdateImages_Url(Images_Url instance);
    partial void DeleteImages_Url(Images_Url instance);
    partial void InsertNormDetail(NormDetail instance);
    partial void UpdateNormDetail(NormDetail instance);
    partial void DeleteNormDetail(NormDetail instance);
    partial void InsertNormWork(NormWork instance);
    partial void UpdateNormWork(NormWork instance);
    partial void DeleteNormWork(NormWork instance);
    partial void InsertUnitPrice(UnitPrice instance);
    partial void UpdateUnitPrice(UnitPrice instance);
    partial void DeleteUnitPrice(UnitPrice instance);
    partial void InsertUnitPrice_Area(UnitPrice_Area instance);
    partial void UpdateUnitPrice_Area(UnitPrice_Area instance);
    partial void DeleteUnitPrice_Area(UnitPrice_Area instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertUserWork_Resource(UserWork_Resource instance);
    partial void UpdateUserWork_Resource(UserWork_Resource instance);
    partial void DeleteUserWork_Resource(UserWork_Resource instance);
    #endregion
		
		public DataDTXDDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["Construction_EstimatingConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataDTXDDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataDTXDDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataDTXDDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataDTXDDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Area> Areas
		{
			get
			{
				return this.GetTable<Area>();
			}
		}
		
		public System.Data.Linq.Table<UserWork> UserWorks
		{
			get
			{
				return this.GetTable<UserWork>();
			}
		}
		
		public System.Data.Linq.Table<Building> Buildings
		{
			get
			{
				return this.GetTable<Building>();
			}
		}
		
		public System.Data.Linq.Table<BuildingItem> BuildingItems
		{
			get
			{
				return this.GetTable<BuildingItem>();
			}
		}
		
		public System.Data.Linq.Table<Images_Url> Images_Urls
		{
			get
			{
				return this.GetTable<Images_Url>();
			}
		}
		
		public System.Data.Linq.Table<NormDetail> NormDetails
		{
			get
			{
				return this.GetTable<NormDetail>();
			}
		}
		
		public System.Data.Linq.Table<NormWork> NormWorks
		{
			get
			{
				return this.GetTable<NormWork>();
			}
		}
		
		public System.Data.Linq.Table<UnitPrice> UnitPrices
		{
			get
			{
				return this.GetTable<UnitPrice>();
			}
		}
		
		public System.Data.Linq.Table<UnitPrice_Area> UnitPrice_Areas
		{
			get
			{
				return this.GetTable<UnitPrice_Area>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<UserWork_Resource> UserWork_Resources
		{
			get
			{
				return this.GetTable<UserWork_Resource>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Area")]
	public partial class Area : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _Name;
		
		private string _Address;
		
		private string _Email;
		
		private EntitySet<UnitPrice_Area> _UnitPrice_Areas;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    #endregion
		
		public Area()
		{
			this._UnitPrice_Areas = new EntitySet<UnitPrice_Area>(new Action<UnitPrice_Area>(this.attach_UnitPrice_Areas), new Action<UnitPrice_Area>(this.detach_UnitPrice_Areas));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(500)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(500)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(200)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Area_UnitPrice_Area", Storage="_UnitPrice_Areas", ThisKey="ID", OtherKey="Area_ID")]
		public EntitySet<UnitPrice_Area> UnitPrice_Areas
		{
			get
			{
				return this._UnitPrice_Areas;
			}
			set
			{
				this._UnitPrice_Areas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Area", Storage="_User", ThisKey="Email", OtherKey="Email", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Areas.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Areas.Add(this);
						this._Email = value.Email;
					}
					else
					{
						this._Email = default(string);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UnitPrice_Areas(UnitPrice_Area entity)
		{
			this.SendPropertyChanging();
			entity.Area = this;
		}
		
		private void detach_UnitPrice_Areas(UnitPrice_Area entity)
		{
			this.SendPropertyChanging();
			entity.Area = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserWorks")]
	public partial class UserWork : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID_Primary;
		
		private long _BuildingItem_ID;
		
		private long _Sub_BuildingItem_ID;
		
		private long _IndexSheet;
		
		private string _ID;
		
		private string _NormWork_ID;
		
		private string _Name;
		
		private string _Unit;
		
		private System.Nullable<decimal> _Number;
		
		private System.Nullable<decimal> _Horizontal;
		
		private System.Nullable<decimal> _Vertical;
		
		private System.Nullable<decimal> _Height;
		
		private System.Nullable<decimal> _Area;
		
		private System.Nullable<decimal> _PriceMaterial;
		
		private System.Nullable<decimal> _PriceLabor;
		
		private System.Nullable<decimal> _PriceMachine;
		
		private System.Nullable<decimal> _SumMaterial;
		
		private System.Nullable<decimal> _SumLabor;
		
		private System.Nullable<decimal> _SumMachine;
		
		private EntityRef<BuildingItem> _BuildingItem;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_PrimaryChanging(long value);
    partial void OnID_PrimaryChanged();
    partial void OnBuildingItem_IDChanging(long value);
    partial void OnBuildingItem_IDChanged();
    partial void OnSub_BuildingItem_IDChanging(long value);
    partial void OnSub_BuildingItem_IDChanged();
    partial void OnIndexSheetChanging(long value);
    partial void OnIndexSheetChanged();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    partial void OnNormWork_IDChanging(string value);
    partial void OnNormWork_IDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnUnitChanging(string value);
    partial void OnUnitChanged();
    partial void OnNumberChanging(System.Nullable<decimal> value);
    partial void OnNumberChanged();
    partial void OnHorizontalChanging(System.Nullable<decimal> value);
    partial void OnHorizontalChanged();
    partial void OnVerticalChanging(System.Nullable<decimal> value);
    partial void OnVerticalChanged();
    partial void OnHeightChanging(System.Nullable<decimal> value);
    partial void OnHeightChanged();
    partial void OnAreaChanging(System.Nullable<decimal> value);
    partial void OnAreaChanged();
    partial void OnPriceMaterialChanging(System.Nullable<decimal> value);
    partial void OnPriceMaterialChanged();
    partial void OnPriceLaborChanging(System.Nullable<decimal> value);
    partial void OnPriceLaborChanged();
    partial void OnPriceMachineChanging(System.Nullable<decimal> value);
    partial void OnPriceMachineChanged();
    partial void OnSumMaterialChanging(System.Nullable<decimal> value);
    partial void OnSumMaterialChanged();
    partial void OnSumLaborChanging(System.Nullable<decimal> value);
    partial void OnSumLaborChanged();
    partial void OnSumMachineChanging(System.Nullable<decimal> value);
    partial void OnSumMachineChanged();
    #endregion
		
		public UserWork()
		{
			this._BuildingItem = default(EntityRef<BuildingItem>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Primary", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID_Primary
		{
			get
			{
				return this._ID_Primary;
			}
			set
			{
				if ((this._ID_Primary != value))
				{
					this.OnID_PrimaryChanging(value);
					this.SendPropertyChanging();
					this._ID_Primary = value;
					this.SendPropertyChanged("ID_Primary");
					this.OnID_PrimaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuildingItem_ID", DbType="BigInt NOT NULL")]
		public long BuildingItem_ID
		{
			get
			{
				return this._BuildingItem_ID;
			}
			set
			{
				if ((this._BuildingItem_ID != value))
				{
					if (this._BuildingItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBuildingItem_IDChanging(value);
					this.SendPropertyChanging();
					this._BuildingItem_ID = value;
					this.SendPropertyChanged("BuildingItem_ID");
					this.OnBuildingItem_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sub_BuildingItem_ID", DbType="BigInt NOT NULL")]
		public long Sub_BuildingItem_ID
		{
			get
			{
				return this._Sub_BuildingItem_ID;
			}
			set
			{
				if ((this._Sub_BuildingItem_ID != value))
				{
					this.OnSub_BuildingItem_IDChanging(value);
					this.SendPropertyChanging();
					this._Sub_BuildingItem_ID = value;
					this.SendPropertyChanged("Sub_BuildingItem_ID");
					this.OnSub_BuildingItem_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IndexSheet", DbType="BigInt NOT NULL")]
		public long IndexSheet
		{
			get
			{
				return this._IndexSheet;
			}
			set
			{
				if ((this._IndexSheet != value))
				{
					this.OnIndexSheetChanging(value);
					this.SendPropertyChanging();
					this._IndexSheet = value;
					this.SendPropertyChanged("IndexSheet");
					this.OnIndexSheetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="NVarChar(50)")]
		public string ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NormWork_ID", DbType="NVarChar(50)")]
		public string NormWork_ID
		{
			get
			{
				return this._NormWork_ID;
			}
			set
			{
				if ((this._NormWork_ID != value))
				{
					this.OnNormWork_IDChanging(value);
					this.SendPropertyChanging();
					this._NormWork_ID = value;
					this.SendPropertyChanged("NormWork_ID");
					this.OnNormWork_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(3000)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Unit", DbType="NVarChar(50)")]
		public string Unit
		{
			get
			{
				return this._Unit;
			}
			set
			{
				if ((this._Unit != value))
				{
					this.OnUnitChanging(value);
					this.SendPropertyChanging();
					this._Unit = value;
					this.SendPropertyChanged("Unit");
					this.OnUnitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Number", DbType="Decimal(18,3)")]
		public System.Nullable<decimal> Number
		{
			get
			{
				return this._Number;
			}
			set
			{
				if ((this._Number != value))
				{
					this.OnNumberChanging(value);
					this.SendPropertyChanging();
					this._Number = value;
					this.SendPropertyChanged("Number");
					this.OnNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Horizontal", DbType="Decimal(18,3)")]
		public System.Nullable<decimal> Horizontal
		{
			get
			{
				return this._Horizontal;
			}
			set
			{
				if ((this._Horizontal != value))
				{
					this.OnHorizontalChanging(value);
					this.SendPropertyChanging();
					this._Horizontal = value;
					this.SendPropertyChanged("Horizontal");
					this.OnHorizontalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Vertical", DbType="Decimal(18,3)")]
		public System.Nullable<decimal> Vertical
		{
			get
			{
				return this._Vertical;
			}
			set
			{
				if ((this._Vertical != value))
				{
					this.OnVerticalChanging(value);
					this.SendPropertyChanging();
					this._Vertical = value;
					this.SendPropertyChanged("Vertical");
					this.OnVerticalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Height", DbType="Decimal(18,3)")]
		public System.Nullable<decimal> Height
		{
			get
			{
				return this._Height;
			}
			set
			{
				if ((this._Height != value))
				{
					this.OnHeightChanging(value);
					this.SendPropertyChanging();
					this._Height = value;
					this.SendPropertyChanged("Height");
					this.OnHeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Area", DbType="Decimal(18,3)")]
		public System.Nullable<decimal> Area
		{
			get
			{
				return this._Area;
			}
			set
			{
				if ((this._Area != value))
				{
					this.OnAreaChanging(value);
					this.SendPropertyChanging();
					this._Area = value;
					this.SendPropertyChanged("Area");
					this.OnAreaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriceMaterial", DbType="Decimal(18,3)")]
		public System.Nullable<decimal> PriceMaterial
		{
			get
			{
				return this._PriceMaterial;
			}
			set
			{
				if ((this._PriceMaterial != value))
				{
					this.OnPriceMaterialChanging(value);
					this.SendPropertyChanging();
					this._PriceMaterial = value;
					this.SendPropertyChanged("PriceMaterial");
					this.OnPriceMaterialChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriceLabor", DbType="Decimal(18,3)")]
		public System.Nullable<decimal> PriceLabor
		{
			get
			{
				return this._PriceLabor;
			}
			set
			{
				if ((this._PriceLabor != value))
				{
					this.OnPriceLaborChanging(value);
					this.SendPropertyChanging();
					this._PriceLabor = value;
					this.SendPropertyChanged("PriceLabor");
					this.OnPriceLaborChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriceMachine", DbType="Decimal(18,3)")]
		public System.Nullable<decimal> PriceMachine
		{
			get
			{
				return this._PriceMachine;
			}
			set
			{
				if ((this._PriceMachine != value))
				{
					this.OnPriceMachineChanging(value);
					this.SendPropertyChanging();
					this._PriceMachine = value;
					this.SendPropertyChanged("PriceMachine");
					this.OnPriceMachineChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SumMaterial", DbType="Decimal(18,3)")]
		public System.Nullable<decimal> SumMaterial
		{
			get
			{
				return this._SumMaterial;
			}
			set
			{
				if ((this._SumMaterial != value))
				{
					this.OnSumMaterialChanging(value);
					this.SendPropertyChanging();
					this._SumMaterial = value;
					this.SendPropertyChanged("SumMaterial");
					this.OnSumMaterialChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SumLabor", DbType="Decimal(18,3)")]
		public System.Nullable<decimal> SumLabor
		{
			get
			{
				return this._SumLabor;
			}
			set
			{
				if ((this._SumLabor != value))
				{
					this.OnSumLaborChanging(value);
					this.SendPropertyChanging();
					this._SumLabor = value;
					this.SendPropertyChanged("SumLabor");
					this.OnSumLaborChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SumMachine", DbType="Decimal(18,3)")]
		public System.Nullable<decimal> SumMachine
		{
			get
			{
				return this._SumMachine;
			}
			set
			{
				if ((this._SumMachine != value))
				{
					this.OnSumMachineChanging(value);
					this.SendPropertyChanging();
					this._SumMachine = value;
					this.SendPropertyChanged("SumMachine");
					this.OnSumMachineChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BuildingItem_UserWork", Storage="_BuildingItem", ThisKey="BuildingItem_ID", OtherKey="ID", IsForeignKey=true)]
		public BuildingItem BuildingItem
		{
			get
			{
				return this._BuildingItem.Entity;
			}
			set
			{
				BuildingItem previousValue = this._BuildingItem.Entity;
				if (((previousValue != value) 
							|| (this._BuildingItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BuildingItem.Entity = null;
						previousValue.UserWorks.Remove(this);
					}
					this._BuildingItem.Entity = value;
					if ((value != null))
					{
						value.UserWorks.Add(this);
						this._BuildingItem_ID = value.ID;
					}
					else
					{
						this._BuildingItem_ID = default(long);
					}
					this.SendPropertyChanged("BuildingItem");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Building")]
	public partial class Building : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _Email;
		
		private string _Name;
		
		private string _Description;
		
		private string _Address;
		
		private decimal _Sum;
		
		private EntitySet<BuildingItem> _BuildingItems;
		
		private EntitySet<Images_Url> _Images_Urls;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnSumChanging(decimal value);
    partial void OnSumChanged();
    #endregion
		
		public Building()
		{
			this._BuildingItems = new EntitySet<BuildingItem>(new Action<BuildingItem>(this.attach_BuildingItems), new Action<BuildingItem>(this.detach_BuildingItems));
			this._Images_Urls = new EntitySet<Images_Url>(new Action<Images_Url>(this.attach_Images_Urls), new Action<Images_Url>(this.detach_Images_Urls));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(2000) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(2000)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(1000)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sum", DbType="Decimal(18,0) NOT NULL")]
		public decimal Sum
		{
			get
			{
				return this._Sum;
			}
			set
			{
				if ((this._Sum != value))
				{
					this.OnSumChanging(value);
					this.SendPropertyChanging();
					this._Sum = value;
					this.SendPropertyChanged("Sum");
					this.OnSumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Building_BuildingItem", Storage="_BuildingItems", ThisKey="ID", OtherKey="Building_ID")]
		public EntitySet<BuildingItem> BuildingItems
		{
			get
			{
				return this._BuildingItems;
			}
			set
			{
				this._BuildingItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Building_Images_Url", Storage="_Images_Urls", ThisKey="ID", OtherKey="Building_ID")]
		public EntitySet<Images_Url> Images_Urls
		{
			get
			{
				return this._Images_Urls;
			}
			set
			{
				this._Images_Urls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Building", Storage="_User", ThisKey="Email", OtherKey="Email", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Buildings.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Buildings.Add(this);
						this._Email = value.Email;
					}
					else
					{
						this._Email = default(string);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BuildingItems(BuildingItem entity)
		{
			this.SendPropertyChanging();
			entity.Building = this;
		}
		
		private void detach_BuildingItems(BuildingItem entity)
		{
			this.SendPropertyChanging();
			entity.Building = null;
		}
		
		private void attach_Images_Urls(Images_Url entity)
		{
			this.SendPropertyChanging();
			entity.Building = this;
		}
		
		private void detach_Images_Urls(Images_Url entity)
		{
			this.SendPropertyChanging();
			entity.Building = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BuildingItems")]
	public partial class BuildingItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _Building_ID;
		
		private string _Name;
		
		private string _Description;
		
		private decimal _Sum;
		
		private EntitySet<UserWork> _UserWorks;
		
		private EntitySet<UserWork_Resource> _UserWork_Resources;
		
		private EntityRef<Building> _Building;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnBuilding_IDChanging(long value);
    partial void OnBuilding_IDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnSumChanging(decimal value);
    partial void OnSumChanged();
    #endregion
		
		public BuildingItem()
		{
			this._UserWorks = new EntitySet<UserWork>(new Action<UserWork>(this.attach_UserWorks), new Action<UserWork>(this.detach_UserWorks));
			this._UserWork_Resources = new EntitySet<UserWork_Resource>(new Action<UserWork_Resource>(this.attach_UserWork_Resources), new Action<UserWork_Resource>(this.detach_UserWork_Resources));
			this._Building = default(EntityRef<Building>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Building_ID", DbType="BigInt NOT NULL")]
		public long Building_ID
		{
			get
			{
				return this._Building_ID;
			}
			set
			{
				if ((this._Building_ID != value))
				{
					if (this._Building.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBuilding_IDChanging(value);
					this.SendPropertyChanging();
					this._Building_ID = value;
					this.SendPropertyChanged("Building_ID");
					this.OnBuilding_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(2000) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(2000)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sum", DbType="Decimal(18,3) NOT NULL")]
		public decimal Sum
		{
			get
			{
				return this._Sum;
			}
			set
			{
				if ((this._Sum != value))
				{
					this.OnSumChanging(value);
					this.SendPropertyChanging();
					this._Sum = value;
					this.SendPropertyChanged("Sum");
					this.OnSumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BuildingItem_UserWork", Storage="_UserWorks", ThisKey="ID", OtherKey="BuildingItem_ID")]
		public EntitySet<UserWork> UserWorks
		{
			get
			{
				return this._UserWorks;
			}
			set
			{
				this._UserWorks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BuildingItem_UserWork_Resource", Storage="_UserWork_Resources", ThisKey="ID", OtherKey="BuildingItem_ID")]
		public EntitySet<UserWork_Resource> UserWork_Resources
		{
			get
			{
				return this._UserWork_Resources;
			}
			set
			{
				this._UserWork_Resources.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Building_BuildingItem", Storage="_Building", ThisKey="Building_ID", OtherKey="ID", IsForeignKey=true)]
		public Building Building
		{
			get
			{
				return this._Building.Entity;
			}
			set
			{
				Building previousValue = this._Building.Entity;
				if (((previousValue != value) 
							|| (this._Building.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Building.Entity = null;
						previousValue.BuildingItems.Remove(this);
					}
					this._Building.Entity = value;
					if ((value != null))
					{
						value.BuildingItems.Add(this);
						this._Building_ID = value.ID;
					}
					else
					{
						this._Building_ID = default(long);
					}
					this.SendPropertyChanged("Building");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserWorks(UserWork entity)
		{
			this.SendPropertyChanging();
			entity.BuildingItem = this;
		}
		
		private void detach_UserWorks(UserWork entity)
		{
			this.SendPropertyChanging();
			entity.BuildingItem = null;
		}
		
		private void attach_UserWork_Resources(UserWork_Resource entity)
		{
			this.SendPropertyChanging();
			entity.BuildingItem = this;
		}
		
		private void detach_UserWork_Resources(UserWork_Resource entity)
		{
			this.SendPropertyChanging();
			entity.BuildingItem = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Images_Url")]
	public partial class Images_Url : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _Building_ID;
		
		private string _Url;
		
		private EntityRef<Building> _Building;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnBuilding_IDChanging(long value);
    partial void OnBuilding_IDChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    #endregion
		
		public Images_Url()
		{
			this._Building = default(EntityRef<Building>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Building_ID", DbType="BigInt NOT NULL")]
		public long Building_ID
		{
			get
			{
				return this._Building_ID;
			}
			set
			{
				if ((this._Building_ID != value))
				{
					if (this._Building.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBuilding_IDChanging(value);
					this.SendPropertyChanging();
					this._Building_ID = value;
					this.SendPropertyChanged("Building_ID");
					this.OnBuilding_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Url", DbType="NVarChar(2000) NOT NULL", CanBeNull=false)]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Building_Images_Url", Storage="_Building", ThisKey="Building_ID", OtherKey="ID", IsForeignKey=true)]
		public Building Building
		{
			get
			{
				return this._Building.Entity;
			}
			set
			{
				Building previousValue = this._Building.Entity;
				if (((previousValue != value) 
							|| (this._Building.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Building.Entity = null;
						previousValue.Images_Urls.Remove(this);
					}
					this._Building.Entity = value;
					if ((value != null))
					{
						value.Images_Urls.Add(this);
						this._Building_ID = value.ID;
					}
					else
					{
						this._Building_ID = default(long);
					}
					this.SendPropertyChanged("Building");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NormDetails")]
	public partial class NormDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _NormWork_ID;
		
		private string _UnitPrice_ID;
		
		private decimal _Numbers;
		
		private EntityRef<NormWork> _NormWork;
		
		private EntityRef<UnitPrice> _UnitPrice;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnNormWork_IDChanging(string value);
    partial void OnNormWork_IDChanged();
    partial void OnUnitPrice_IDChanging(string value);
    partial void OnUnitPrice_IDChanged();
    partial void OnNumbersChanging(decimal value);
    partial void OnNumbersChanged();
    #endregion
		
		public NormDetail()
		{
			this._NormWork = default(EntityRef<NormWork>);
			this._UnitPrice = default(EntityRef<UnitPrice>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NormWork_ID", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string NormWork_ID
		{
			get
			{
				return this._NormWork_ID;
			}
			set
			{
				if ((this._NormWork_ID != value))
				{
					if (this._NormWork.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNormWork_IDChanging(value);
					this.SendPropertyChanging();
					this._NormWork_ID = value;
					this.SendPropertyChanged("NormWork_ID");
					this.OnNormWork_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitPrice_ID", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string UnitPrice_ID
		{
			get
			{
				return this._UnitPrice_ID;
			}
			set
			{
				if ((this._UnitPrice_ID != value))
				{
					if (this._UnitPrice.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUnitPrice_IDChanging(value);
					this.SendPropertyChanging();
					this._UnitPrice_ID = value;
					this.SendPropertyChanged("UnitPrice_ID");
					this.OnUnitPrice_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Numbers", DbType="Decimal(18,3) NOT NULL")]
		public decimal Numbers
		{
			get
			{
				return this._Numbers;
			}
			set
			{
				if ((this._Numbers != value))
				{
					this.OnNumbersChanging(value);
					this.SendPropertyChanging();
					this._Numbers = value;
					this.SendPropertyChanged("Numbers");
					this.OnNumbersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NormWork_NormDetail", Storage="_NormWork", ThisKey="NormWork_ID", OtherKey="ID", IsForeignKey=true)]
		public NormWork NormWork
		{
			get
			{
				return this._NormWork.Entity;
			}
			set
			{
				NormWork previousValue = this._NormWork.Entity;
				if (((previousValue != value) 
							|| (this._NormWork.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NormWork.Entity = null;
						previousValue.NormDetails.Remove(this);
					}
					this._NormWork.Entity = value;
					if ((value != null))
					{
						value.NormDetails.Add(this);
						this._NormWork_ID = value.ID;
					}
					else
					{
						this._NormWork_ID = default(string);
					}
					this.SendPropertyChanged("NormWork");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UnitPrice_NormDetail", Storage="_UnitPrice", ThisKey="UnitPrice_ID", OtherKey="ID", IsForeignKey=true)]
		public UnitPrice UnitPrice
		{
			get
			{
				return this._UnitPrice.Entity;
			}
			set
			{
				UnitPrice previousValue = this._UnitPrice.Entity;
				if (((previousValue != value) 
							|| (this._UnitPrice.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UnitPrice.Entity = null;
						previousValue.NormDetails.Remove(this);
					}
					this._UnitPrice.Entity = value;
					if ((value != null))
					{
						value.NormDetails.Add(this);
						this._UnitPrice_ID = value.ID;
					}
					else
					{
						this._UnitPrice_ID = default(string);
					}
					this.SendPropertyChanged("UnitPrice");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NormWorks")]
	public partial class NormWork : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID;
		
		private string _Name;
		
		private string _Unit;
		
		private EntitySet<NormDetail> _NormDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnUnitChanging(string value);
    partial void OnUnitChanged();
    #endregion
		
		public NormWork()
		{
			this._NormDetails = new EntitySet<NormDetail>(new Action<NormDetail>(this.attach_NormDetails), new Action<NormDetail>(this.detach_NormDetails));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Unit", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Unit
		{
			get
			{
				return this._Unit;
			}
			set
			{
				if ((this._Unit != value))
				{
					this.OnUnitChanging(value);
					this.SendPropertyChanging();
					this._Unit = value;
					this.SendPropertyChanged("Unit");
					this.OnUnitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NormWork_NormDetail", Storage="_NormDetails", ThisKey="ID", OtherKey="NormWork_ID")]
		public EntitySet<NormDetail> NormDetails
		{
			get
			{
				return this._NormDetails;
			}
			set
			{
				this._NormDetails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_NormDetails(NormDetail entity)
		{
			this.SendPropertyChanging();
			entity.NormWork = this;
		}
		
		private void detach_NormDetails(NormDetail entity)
		{
			this.SendPropertyChanging();
			entity.NormWork = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UnitPrice")]
	public partial class UnitPrice : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID;
		
		private string _Name;
		
		private string _Unit;
		
		private EntitySet<NormDetail> _NormDetails;
		
		private EntitySet<UnitPrice_Area> _UnitPrice_Areas;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnUnitChanging(string value);
    partial void OnUnitChanged();
    #endregion
		
		public UnitPrice()
		{
			this._NormDetails = new EntitySet<NormDetail>(new Action<NormDetail>(this.attach_NormDetails), new Action<NormDetail>(this.detach_NormDetails));
			this._UnitPrice_Areas = new EntitySet<UnitPrice_Area>(new Action<UnitPrice_Area>(this.attach_UnitPrice_Areas), new Action<UnitPrice_Area>(this.detach_UnitPrice_Areas));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(2000) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Unit", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Unit
		{
			get
			{
				return this._Unit;
			}
			set
			{
				if ((this._Unit != value))
				{
					this.OnUnitChanging(value);
					this.SendPropertyChanging();
					this._Unit = value;
					this.SendPropertyChanged("Unit");
					this.OnUnitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UnitPrice_NormDetail", Storage="_NormDetails", ThisKey="ID", OtherKey="UnitPrice_ID")]
		public EntitySet<NormDetail> NormDetails
		{
			get
			{
				return this._NormDetails;
			}
			set
			{
				this._NormDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UnitPrice_UnitPrice_Area", Storage="_UnitPrice_Areas", ThisKey="ID", OtherKey="UnitPrice_ID")]
		public EntitySet<UnitPrice_Area> UnitPrice_Areas
		{
			get
			{
				return this._UnitPrice_Areas;
			}
			set
			{
				this._UnitPrice_Areas.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_NormDetails(NormDetail entity)
		{
			this.SendPropertyChanging();
			entity.UnitPrice = this;
		}
		
		private void detach_NormDetails(NormDetail entity)
		{
			this.SendPropertyChanging();
			entity.UnitPrice = null;
		}
		
		private void attach_UnitPrice_Areas(UnitPrice_Area entity)
		{
			this.SendPropertyChanging();
			entity.UnitPrice = this;
		}
		
		private void detach_UnitPrice_Areas(UnitPrice_Area entity)
		{
			this.SendPropertyChanging();
			entity.UnitPrice = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UnitPrice_Area")]
	public partial class UnitPrice_Area : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _Area_ID;
		
		private string _UnitPrice_ID;
		
		private decimal _Price;
		
		private EntityRef<Area> _Area;
		
		private EntityRef<UnitPrice> _UnitPrice;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnArea_IDChanging(long value);
    partial void OnArea_IDChanged();
    partial void OnUnitPrice_IDChanging(string value);
    partial void OnUnitPrice_IDChanged();
    partial void OnPriceChanging(decimal value);
    partial void OnPriceChanged();
    #endregion
		
		public UnitPrice_Area()
		{
			this._Area = default(EntityRef<Area>);
			this._UnitPrice = default(EntityRef<UnitPrice>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Area_ID", DbType="BigInt NOT NULL")]
		public long Area_ID
		{
			get
			{
				return this._Area_ID;
			}
			set
			{
				if ((this._Area_ID != value))
				{
					if (this._Area.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnArea_IDChanging(value);
					this.SendPropertyChanging();
					this._Area_ID = value;
					this.SendPropertyChanged("Area_ID");
					this.OnArea_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitPrice_ID", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string UnitPrice_ID
		{
			get
			{
				return this._UnitPrice_ID;
			}
			set
			{
				if ((this._UnitPrice_ID != value))
				{
					if (this._UnitPrice.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUnitPrice_IDChanging(value);
					this.SendPropertyChanging();
					this._UnitPrice_ID = value;
					this.SendPropertyChanged("UnitPrice_ID");
					this.OnUnitPrice_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Decimal(18,3) NOT NULL")]
		public decimal Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Area_UnitPrice_Area", Storage="_Area", ThisKey="Area_ID", OtherKey="ID", IsForeignKey=true)]
		public Area Area
		{
			get
			{
				return this._Area.Entity;
			}
			set
			{
				Area previousValue = this._Area.Entity;
				if (((previousValue != value) 
							|| (this._Area.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Area.Entity = null;
						previousValue.UnitPrice_Areas.Remove(this);
					}
					this._Area.Entity = value;
					if ((value != null))
					{
						value.UnitPrice_Areas.Add(this);
						this._Area_ID = value.ID;
					}
					else
					{
						this._Area_ID = default(long);
					}
					this.SendPropertyChanged("Area");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UnitPrice_UnitPrice_Area", Storage="_UnitPrice", ThisKey="UnitPrice_ID", OtherKey="ID", IsForeignKey=true)]
		public UnitPrice UnitPrice
		{
			get
			{
				return this._UnitPrice.Entity;
			}
			set
			{
				UnitPrice previousValue = this._UnitPrice.Entity;
				if (((previousValue != value) 
							|| (this._UnitPrice.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UnitPrice.Entity = null;
						previousValue.UnitPrice_Areas.Remove(this);
					}
					this._UnitPrice.Entity = value;
					if ((value != null))
					{
						value.UnitPrice_Areas.Add(this);
						this._UnitPrice_ID = value.ID;
					}
					else
					{
						this._UnitPrice_ID = default(string);
					}
					this.SendPropertyChanged("UnitPrice");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Email;
		
		private string _Password;
		
		private string _Last_Name;
		
		private string _First_Name;
		
		private string _Phone;
		
		private string _Workplace;
		
		private string _City;
		
		private string _Url_Image;
		
		private string _Role;
		
		private EntitySet<Area> _Areas;
		
		private EntitySet<Building> _Buildings;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnLast_NameChanging(string value);
    partial void OnLast_NameChanged();
    partial void OnFirst_NameChanging(string value);
    partial void OnFirst_NameChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnWorkplaceChanging(string value);
    partial void OnWorkplaceChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnUrl_ImageChanging(string value);
    partial void OnUrl_ImageChanged();
    partial void OnRoleChanging(string value);
    partial void OnRoleChanged();
    #endregion
		
		public User()
		{
			this._Areas = new EntitySet<Area>(new Action<Area>(this.attach_Areas), new Action<Area>(this.detach_Areas));
			this._Buildings = new EntitySet<Building>(new Action<Building>(this.attach_Buildings), new Action<Building>(this.detach_Buildings));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(200) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Last_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Last_Name
		{
			get
			{
				return this._Last_Name;
			}
			set
			{
				if ((this._Last_Name != value))
				{
					this.OnLast_NameChanging(value);
					this.SendPropertyChanging();
					this._Last_Name = value;
					this.SendPropertyChanged("Last_Name");
					this.OnLast_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_First_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string First_Name
		{
			get
			{
				return this._First_Name;
			}
			set
			{
				if ((this._First_Name != value))
				{
					this.OnFirst_NameChanging(value);
					this.SendPropertyChanging();
					this._First_Name = value;
					this.SendPropertyChanged("First_Name");
					this.OnFirst_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(12)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Workplace", DbType="NVarChar(100)")]
		public string Workplace
		{
			get
			{
				return this._Workplace;
			}
			set
			{
				if ((this._Workplace != value))
				{
					this.OnWorkplaceChanging(value);
					this.SendPropertyChanging();
					this._Workplace = value;
					this.SendPropertyChanged("Workplace");
					this.OnWorkplaceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="NVarChar(50)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Url_Image", DbType="NVarChar(500)")]
		public string Url_Image
		{
			get
			{
				return this._Url_Image;
			}
			set
			{
				if ((this._Url_Image != value))
				{
					this.OnUrl_ImageChanging(value);
					this.SendPropertyChanging();
					this._Url_Image = value;
					this.SendPropertyChanged("Url_Image");
					this.OnUrl_ImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Role", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Role
		{
			get
			{
				return this._Role;
			}
			set
			{
				if ((this._Role != value))
				{
					this.OnRoleChanging(value);
					this.SendPropertyChanging();
					this._Role = value;
					this.SendPropertyChanged("Role");
					this.OnRoleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Area", Storage="_Areas", ThisKey="Email", OtherKey="Email")]
		public EntitySet<Area> Areas
		{
			get
			{
				return this._Areas;
			}
			set
			{
				this._Areas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Building", Storage="_Buildings", ThisKey="Email", OtherKey="Email")]
		public EntitySet<Building> Buildings
		{
			get
			{
				return this._Buildings;
			}
			set
			{
				this._Buildings.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Areas(Area entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Areas(Area entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Buildings(Building entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Buildings(Building entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserWork_Resource")]
	public partial class UserWork_Resource : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _BuildingItem_ID;
		
		private string _UserWork_ID;
		
		private string _UnitPrice_ID;
		
		private string _Name;
		
		private string _Unit;
		
		private decimal _Number_Norm;
		
		private decimal _Price;
		
		private EntityRef<BuildingItem> _BuildingItem;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnBuildingItem_IDChanging(long value);
    partial void OnBuildingItem_IDChanged();
    partial void OnUserWork_IDChanging(string value);
    partial void OnUserWork_IDChanged();
    partial void OnUnitPrice_IDChanging(string value);
    partial void OnUnitPrice_IDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnUnitChanging(string value);
    partial void OnUnitChanged();
    partial void OnNumber_NormChanging(decimal value);
    partial void OnNumber_NormChanged();
    partial void OnPriceChanging(decimal value);
    partial void OnPriceChanged();
    #endregion
		
		public UserWork_Resource()
		{
			this._BuildingItem = default(EntityRef<BuildingItem>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuildingItem_ID", DbType="BigInt NOT NULL")]
		public long BuildingItem_ID
		{
			get
			{
				return this._BuildingItem_ID;
			}
			set
			{
				if ((this._BuildingItem_ID != value))
				{
					if (this._BuildingItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBuildingItem_IDChanging(value);
					this.SendPropertyChanging();
					this._BuildingItem_ID = value;
					this.SendPropertyChanged("BuildingItem_ID");
					this.OnBuildingItem_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserWork_ID", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string UserWork_ID
		{
			get
			{
				return this._UserWork_ID;
			}
			set
			{
				if ((this._UserWork_ID != value))
				{
					this.OnUserWork_IDChanging(value);
					this.SendPropertyChanging();
					this._UserWork_ID = value;
					this.SendPropertyChanged("UserWork_ID");
					this.OnUserWork_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitPrice_ID", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string UnitPrice_ID
		{
			get
			{
				return this._UnitPrice_ID;
			}
			set
			{
				if ((this._UnitPrice_ID != value))
				{
					this.OnUnitPrice_IDChanging(value);
					this.SendPropertyChanging();
					this._UnitPrice_ID = value;
					this.SendPropertyChanged("UnitPrice_ID");
					this.OnUnitPrice_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(2000) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Unit", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Unit
		{
			get
			{
				return this._Unit;
			}
			set
			{
				if ((this._Unit != value))
				{
					this.OnUnitChanging(value);
					this.SendPropertyChanging();
					this._Unit = value;
					this.SendPropertyChanged("Unit");
					this.OnUnitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Number_Norm", DbType="Decimal(18,3) NOT NULL")]
		public decimal Number_Norm
		{
			get
			{
				return this._Number_Norm;
			}
			set
			{
				if ((this._Number_Norm != value))
				{
					this.OnNumber_NormChanging(value);
					this.SendPropertyChanging();
					this._Number_Norm = value;
					this.SendPropertyChanged("Number_Norm");
					this.OnNumber_NormChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Decimal(18,3) NOT NULL")]
		public decimal Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BuildingItem_UserWork_Resource", Storage="_BuildingItem", ThisKey="BuildingItem_ID", OtherKey="ID", IsForeignKey=true)]
		public BuildingItem BuildingItem
		{
			get
			{
				return this._BuildingItem.Entity;
			}
			set
			{
				BuildingItem previousValue = this._BuildingItem.Entity;
				if (((previousValue != value) 
							|| (this._BuildingItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BuildingItem.Entity = null;
						previousValue.UserWork_Resources.Remove(this);
					}
					this._BuildingItem.Entity = value;
					if ((value != null))
					{
						value.UserWork_Resources.Add(this);
						this._BuildingItem_ID = value.ID;
					}
					else
					{
						this._BuildingItem_ID = default(long);
					}
					this.SendPropertyChanged("BuildingItem");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
